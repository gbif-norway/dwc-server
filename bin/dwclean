#!/usr/bin/perl

use strict;
use warnings;
use 5.14.0;

use DateTime;
use Parse::CSV;
use Geo::Coordinates::UTM;

package GBIFNorway;

sub zone {
  my $grid = shift;
  if($grid =~ /^JH|JJ|JK|JL|JM|JN|JP|JQ|JR|KH|KJ|KK|KL|KM|KN|KP|KQ|KR|KS|LH|LJ|LK|LL|LM|LN|LP|LQ|LR|MH|MJ|MK|ML|MM|MN|MP|MQ|NH|NJ|NK|NL|NM|NN|NP|NQ|PH|PJ|PK|PL|PM|PN|PP|PQ$/) {
    return "32V";
  }
  if($grid =~ /^LV|LA|LB|LC|LD|LE|MR|MV|MA|MB|MC|MD|ME|NR|NS|NT|NU|NV|NA|NB|NC|ND|NE|PR|PS|PT|PU|PV|PA|PB|PC|PD|PE$/) {
    return "32W";
  }
  if($grid =~ /^UC|UD|UE|UF|UG|UH|UJ|UK|UL|UM|VC|VD|VE|VF|VG|VH|VJ|VK|VL|WC|WD|WE|WF|WG|WH|WJ|WK|WL|XC|XD|XE|XF|XG|XH|XJ|XK|XL|XM$/) {
    return "33V";
  }
  if($grid =~ /^UN|UP|UQ|UR|US|UT|UU|UV|VM|VN|VP|VQ|VR|VS|VT|VU|VV|WM|WN|WP|WQ|WR|WS|WT|WU|WV|XN|XP|XQ|XR|XS|XT|XU|XV$/) {
    return "33W";
  }
  if($grid =~ /^CR|CS|CT|CU|CV|CA|CB|CC|CD|CE|DR|DS|DT|DU|DV|DA|DB|DC|DD|DE|ER|ES|ET|EU|EV|EA|EB|EC|ED|EE|FR|FS|FT|FU|FV|FA|FB|FC|FD|FE$/) {
    return "34W";
  }
  if($grid =~ /^LS|LT|LU|MS|MT|MU$/) {
    return "35W";
  }
  if($grid =~ /^CQ$/) { # Sverige
    return "34V";
  }
  if($grid =~ /^UA$/) { # Danmark
    return "33U";
  }
  if($grid =~ /^PG$/) { # Danmark
    return "32U";
  }
  warn "Unknown grid designator ", $grid;
  return "32V";
}

sub musit {
  my $record = {
    'dateLastModified'          =>  $$_[0],
    'institutionCode'           =>  $$_[1],
    'collectionCode'            =>  $$_[2],
    'catalogNumber'             =>  $$_[3],
    'scientificName'            =>  $$_[4],
    'basisOfRecord'             =>  $$_[5],
    'kingdom'                   =>  $$_[6],
    'phylum'                    =>  $$_[7],
    'class'                     =>  $$_[8],
    'order'                     =>  $$_[9],
    'family'                    =>  $$_[10],
    'genus'                     =>  $$_[11],
    'specificEpithet'           =>  $$_[12],
    'infraspecificEpithet'      =>  $$_[13],
    'scientificNameAuthorship'  =>  $$_[14],
    'identifiedBy'              =>  $$_[15],
    'dateIdentified'            =>  "", # $$_[16-18]
    'typeStatus'                =>  $$_[19],
    # $$_[20] er collectorNumber
    'fieldNumber'               =>  $$_[21],
    'recordedBy'                =>  $$_[22],
    'year'                      =>  $$_[23],
    'month'                     =>  $$_[24],
    'day'                       =>  $$_[25],
    'startDayOfYear'            =>  $$_[26], # JulianDay 
    'endDayOfYear'              =>  $$_[26], # JulianDay igjen
    'eventTime'                 =>  $$_[27],
    'continent'                 =>  $$_[28], # ContinentOcean, hm
    'country'                   =>  $$_[29],
    'stateProvince'             =>  $$_[30],
    'county'                    =>  $$_[31],
    'locality'                  =>  $$_[32],
    'koordinater' => $$_[68],
  };
  my $lol = $_;
  if($$lol[56]) {
    my ($grid, $coords) = split(/\s/, $$lol[56]);
    my $zone = zone($grid);
    # $coords =~ s/,//;
    my ($n, $e) = split(/,/, $coords);

    if(length($n) < 5) {
      $n = $n . 5;
      $e = $e . 5;
    }
    my $mgrs = "${zone}${grid}${n}${e}";

    printf("$mgrs\t");
    my ($lat, $lon) = Geo::Coordinates::UTM::mgrs_to_latlon(23, $mgrs);
    my ($zona, $east, $north) = Geo::Coordinates::UTM::mgrs_to_utm($mgrs);
    $$record{'raw'} = "$zone\t$east\t$north";
    $$record{'latitude'} = $lat;
    $$record{'longitude'} = $lon;
    # printf("%s\t%s\n", $grid, zone($grid));
    return $record;
  }
  given ($$_[68]) {
    when (/UTM/) { 
      # printf("%s\t%s\t%s\t", $$lol[53], $$lol[54], $$lol[55]);
      #print($$lol[68]);
      #print("\n");
    }
  }
  #my ($latitude,$longitude) = Geo::Coordinates::UTM::mgrs_to_latlon(23, "32NR7131");

  return $record;
}

package DwC;
sub new {
  return $_[1]; 
}

package main;

my $csv = Parse::CSV->new(
  file => $ARGV[0],
  filter => \&GBIFNorway::musit,
  csv_attr => {
    quote_char => undef,
    sep_char => "\t",
    binary => 1
  }
);

while (my $row = $csv->fetch) {
  my $dwc = DwC->new($row);
  print($dwc->{'catalogNumber'} . "\t");
  if($dwc->{'raw'}) {
    print($dwc->{'raw'} . "\t");
    print($dwc->{'latitude'} . "\t");
    print($dwc->{'longitude'});
  } 
  print("\n");
}

if($csv->errstr) {
  print($csv->errstr . "\n") and die;
}

