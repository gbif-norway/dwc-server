#!/usr/bin/perl

use strict;
use warnings;
use utf8;
use 5.14.0;
use open qw/:std :utf8/;

use Getopt::Std;
use Parse::CSV;

use Artsnavn;
use Geonames;
use DwC;

package GBIFNorway;

our %names = ();
our %filters = ();
our %cleaners = ();

do 'formats/musit.pl';
do 'formats/nodwc.pl';
do 'formats/dwc.pl';

package main;

# fiks dette + lag man
our $usage = "$0 [-ghu]\n";

our ($opt_c, $opt_d, $opt_f, $opt_e, $opt_g, $opt_h, $opt_i, $opt_s, $opt_u);
our ($opt_x, $opt_v, $opt_k, $opt_r);
getopts("k:x:s:i:c:d:e:f:ghruv");

if($opt_h) {
  print($usage) and exit;
}

our $verbatim;
if($opt_x) {
  open $verbatim, ">", $opt_x;
  say $verbatim join("\t", @DwC::terms);
}

say STDOUT join("\t", @DwC::terms);

my $filter = $GBIFNorway::filters{$opt_f || "musit"};
my $n = $GBIFNorway::names{$opt_f || "musit"};

my %options = (
  handle => \*STDIN,
  filter => $filter,
  binary => 1,
  sep_char => "\t",
  quote_char => undef,
  escape_char => undef,
  encoding_in  => "utf8"
);

# stygg hack
if ($GBIFNorway::names{$opt_f || "musit"}) {
  $options{names} = $GBIFNorway::names{$opt_f || "musit"},
}

my $csv = Parse::CSV->new(%options);

my %uniques;
my $errno = 0;

while (my $raw = $csv->fetch) {
  my $dwc = DwC->new($raw, $csv->row);
  my $cat = $$dwc{catalogNumber};
  my $cleaner = $GBIFNorway::cleaners{$opt_f || "musit"};

  if($opt_x) {
    $dwc->printcsv($verbatim, \@DwC::terms);
  }

  &$cleaner($dwc);

  if($opt_i) {
    $dwc->addinfo("Replaced institutionCode with $opt_i", "institutionCode");
    $$dwc{institutionCode} = $opt_i if($opt_i);
  }
  if($opt_c) {
    $dwc->addinfo("Replaced collectionCode with $opt_c", "collectionCode");
    $$dwc{collectionCode} = $opt_c if($opt_c);
  }

  if(!$opt_u) {
    if($uniques{$cat}) {
      $dwc->adderror("Duplicate catalogNumber", "core");
    }
    $uniques{$cat} = 1;
  }

  if($opt_d) {
    $$dwc{dateLastModified} = $opt_d;
  }

  $dwc->validatebasisofrecord;
  $dwc->validatedates;
  $dwc->validateelevation;

  my $tmp = $opt_r || 0;
  eval {
    Artsnavn::addtaxonomy($dwc, $opt_k, 1);
  };
  if ($@ && !$tmp) {
    my $warning = $@ =~ s/\s+$//r =~ s/at.*//r;
    $dwc->addwarning($warning, "name");
  }

  if($$dwc{country} && !$$dwc{continent}) {
    $$dwc{continent} = Geonames::continent($$dwc{country});
  }

  $dwc->handlecoordinates;
  $dwc->validategeography if($$dwc{decimalLatitude} && $$dwc{decimalLongitude});

# flytt inn i DwC~?
  my $triplet = $dwc->triplet;
  for my $error (@{$$dwc{errors}}) {
    $errno++;
    say STDERR "$errno\terror\t$triplet\t$$dwc{_row}\t$error";
  }
  for my $error (@{$$dwc{warnings}}) {
    $errno++;
    say STDERR "$errno\twarning\t$triplet\t$$dwc{_row}\t$error";
  }

  if($opt_v) {
    for my $error (@{$$dwc{info}}) {
      $errno++;
      say STDERR "$errno\tinfo\t$triplet\t$$dwc{_row}\t$error";
    }
  }
  next if (@{$$dwc{errors}});

  $dwc->printcsv(\*STDOUT, \@DwC::terms);

  # se etter kommune og sette midtpunkt?
  # test mot land
}

if($csv->errstr) {
  die($csv->errstr . "\n");
}

close($verbatim) if $verbatim;

