#!/usr/bin/perl

use strict;
use warnings;
use utf8;

use 5.14.0;
use open qw/:std :utf8/;

use POSIX;
use Getopt::Std;
use DateTime;
use Parse::CSV;
use Geo::Coordinates::UTM;

use JSON::XS;

do 'formats/musit.pl';

package GBIFNorway;

package DwC;
sub new {
  my $me = shift;
  my $record = shift;
  $$record{rowNumber} = shift;
  $$record{errors} = [];
  return bless $record; 
}

our @artskart = (
  "dateLastModified", "institutionCode", "collectionCode", "catalogNumber",
  "scientificName", "basisOfRecord",
  "kingdom", "phylum", "class", "order", "family", "genus",
  "specificEpithet", "infraspecificEpithet","scientificNameAuthorship",
  "identifiedBy", "YearIdentified", "MonthIdentified", "DayIdentified",
  "typeStatus", "recordNumber", "fieldNumber", "recordedBy",
  "year", "month", "day", "startDayOfYear", "eventTime",
  "continent", "country", "stateProvince", "county", "locality",
  "decimalLongitude", "decimalLatitude", "coordinateUncertaintyInMeters",
  "BoundingBox",
  "minimumElevationInMeters", "maximumElevationInMeters",
  "minimumDepthInMeters", "maximumDepthInMeters",
  "sex", "preparations", "individualCount",
  "otherCatalogNumbers", #"empty", "empty",
  "occurrenceRemarks", "samplingProtocol", "identificationRemarks",
  "habitat",

  # norske tillegg ~.~
  #"Okologi", "Habitat", "Substrat", #"UTMsone", "UTMost", "UTMnord",
  #"MGRSfra", "MGRStil", "georeferenceSources", "ElevationKilde",
  #"Status", "NRikeID", "NRekkeID", "NKlasseID", "NOrdenID", "NFamilieID",
  #"NSlektID", "NArtID",
  "associatedMedia"

);

sub addError {
  my $dwc = shift;
  push($dwc->{errors}, {
    row => $dwc->{rowNumber},
    error => shift
  });
}

sub validateBasisOfRecord {
  my $dwc = shift;
  if($dwc->{basisOfRecord} !~ /^Preserved specimen|Observation$/i) {
    $dwc->addWarning("Unknown basisOfRecord $dwc->{basisOfRecord}");
  }
}

sub validateDates {
  my $dwc = shift;
  my $year = ::strftime("%Y", gmtime);
  if($dwc->{year} && ($dwc->{year} > $year || $dwc->{year} < 1800)) {
    warn("Year out of bounds: $dwc->{year}");
  }
  if($dwc->{month} && ($dwc->{month} < 1 || $dwc->{month} > 12)) {
    warn("Month out of bounds: $dwc->{month}");
  }
  if($dwc->{day} && ($dwc->{day} < 1 || $dwc->{day} > 31)) {
    warn("Day out of bounds: $dwc->{month}");
  }
}

sub printjson {
  my $me = shift;
  my $fields = shift;
  my $json = JSON::XS->new->pretty->convert_blessed(1);
  my %subset;
  @subset{@$fields} = @{$me}{@$fields};
  say($json->encode(\%subset));
}

sub printcsv {
  my $me = shift;
  my $fields = shift;
  say(join("\t", @{$me}{@$fields}));
}

package main;

our %ellipsoids = (
  "European 1950" => 14,
  "WGS84"         => 23,
);

our $usage = "$0 [-ghu]\n";

our ($opt_g, $opt_h, $opt_u);
getopts("ghu");

if($opt_h) {
  print($usage) and exit;
}

my $csv = Parse::CSV->new(
  handle => \*STDIN,
  filter => \&GBIFNorway::musit,
  encoding_in  => "utf8",
  quote_char => undef,
  escape_char => undef,
  sep_char => "\t",
  binary => 1
);

my %uniques;
while (my $row = $csv->fetch) {
  my $dwc = DwC->new($row, $csv->row);
  my $cat = $dwc->{catalogNumber};

  if(!$opt_u) {
    if($uniques{$cat}) {
      $dwc->addError("Duplicate catalogNumber");
      warn("Duplicate catalogNumber") and next;
    }
    $uniques{$cat} = 1;
  }

  $dwc->validateBasisOfRecord;
  $dwc->validateDates;

  # Handle MGRS coordinates
  if($$dwc{verbatimCoordinateSystem} eq "MGRS") {
    my $mgrs = $$dwc{coordinates};
    my $ellipsoid = $ellipsoids{$$dwc{geodeticDatum}};

    my ($lat, $lon) = Geo::Coordinates::UTM::mgrs_to_latlon($ellipsoid, $mgrs);

    if($$dwc{geodeticDatum} eq "European 1950") {
      my $e50 = Geo::Coordinates::Converter->new(
        lat => $lat, lng => $lon,
        datum => 'ED50'
      );
      my $wgs = $e50->convert('wgs84');
      ($lat, $lon) = ($wgs->{lat}, $wgs->{lng});
      $$dwc{geodeticDatum} = "WGS84";
    }
    $$dwc{decimalLatitude} = $lat;
    $$dwc{decimalLongitude} = $lon;
  }

  $dwc->printcsv(\@artskart);
  # $dwc->printjson(\@artskart);

  # sjekke gyldig navn, fyll pÃ¥ hierarki!
  # legg til julianday?
  # sjekk (legg til?) kontinent?

  # koordinater:
  # 1. se etter lat/long
  # 2. se etter utm
  # 3. se etter mgrs
  # 4. se etter kommune og sette midtpunkt?
  # 5. test mot land

  # skjerme sensitive arter
  # legg til rÃ¸dlisteinfo?
}

if($csv->errstr) {
  warn($csv->errstr . "\n") and die;
}

