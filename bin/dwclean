#!/usr/bin/perl

use strict;
use warnings;
use utf8;
use 5.14.0;
use open qw/:std :utf8/;

use Getopt::Std;
use Parse::CSV;
use UUID::Tiny ':std';

use DwC;

package GBIFNorway;

our %names = ();
our %filters = ();
our %cleaners = ();

for my $format (glob 'formats/*.pl') {
  do $format;
}

package main;

# fiks dette + lag man
our $usage = <<EOS;
$0  [-hmruv]
    [-b basisofrecord]
    [-c collectioncode]
    [-d modified]
    [-f format]
    [-i institutioncode]
    [-k kingdom]
    [-x verbatim]
    [-e]
EOS

our $default_f = "dwc";

our ($opt_b, $opt_c, $opt_d, $opt_e, $opt_f, $opt_g, $opt_h, $opt_i);
our ($opt_k, $opt_m, $opt_r, $opt_s, $opt_u, $opt_v, $opt_x, $opt_o);
getopts("k:x:s:i:c:d:f:ghreuvomb:");

if($opt_h) {
  print($usage) and exit;
}

if($opt_k) {
  $ENV{ARTSNAVN_KINGDOM} = $opt_k;
}

our $verbatim;
if($opt_x) {
  open $verbatim, ">", $opt_x;
  say $verbatim join("\t", @DwC::terms);
}

say STDOUT join("\t", @DwC::terms);

my $filter = $GBIFNorway::filters{$opt_f || $default_f};
my $n = $GBIFNorway::names{$opt_f || $default_f};

my %options = (
  handle => \*STDIN,
  filter => $filter,
  binary => 1,
  sep_char => "\t",
  quote_char => undef,
  escape_char => undef,
  encoding_in  => "utf8"
);

# stygg hack
if ($GBIFNorway::names{$opt_f || $default_f}) {
  $options{names} = $GBIFNorway::names{$opt_f || $default_f},
}

my $csv = Parse::CSV->new(%options);

my %uniques;
my $errno = 0;

my $nn = 0;

while (my $raw = $csv->fetch) {
  my $dwc = DwC->new($raw, $csv->row);

  # Set values provided explicitly
  $$dwc{basisOfRecord} = $opt_b if($opt_b);
  $$dwc{institutionCode} = $opt_i if($opt_i);
  $$dwc{collectionCode} = $opt_c if($opt_c);
  $$dwc{catalogNumber} = $nn++ if($opt_m);
  $$dwc{modified} = $opt_d if($opt_d);

  if($opt_o) {
    $$dwc{occurrenceID} = "urn:uuid:" . create_uuid_as_string(UUID_V4);
  }

  # Print verbatim record
  $dwc->printcsv($verbatim, \@DwC::terms) if($opt_x);

  # Preliminary cleanup
  my $cleaner = $GBIFNorway::cleaners{$opt_f || $default_f};
  &$cleaner($dwc);

  # Need a relatively stable id~ default to 'urn:catalog:' combined with the
  #   triplet if there's no occurrenceID
  my $id;
  if($$dwc{occurrenceID} && !$opt_e) {
    $id = $$dwc{occurrenceID};
  } else {
    $id = "urn:catalog:" . $dwc->triplet;
    $$dwc{occurrenceID} = $id;
  }

  # Perform all plugin-based validations
  for my $plugin ($dwc->plugins) {
    $plugin->validate($dwc);
  }

  # And then finally completeness checks
  for my $plugin ($dwc->plugins) {
    $plugin->completeness($dwc);
  }

  # Check for duplicate ids
  if(!$opt_u) {
    if($uniques{$id}) {
      $dwc->log("error", "Duplicate occurrenceID", "core");
    }
    $uniques{$id} = 1;
  }

  # Print errors, warnings, and info messages
  my $row = $$dwc{_row};
  for my $error (@{$$dwc{error}}) {
    $errno++;
    say STDERR "$errno\terror\t$id\t$row\t$$error[0]\t$$error[1]";
  }
  for my $warning (@{$$dwc{warning}}) {
    $errno++;
    say STDERR "$errno\twarning\t$id\t$row\t$$warning[0]\t$$warning[1]";
  }
  if($opt_v) {
    for my $info (@{$$dwc{info}}) {
      $errno++;
      say STDERR "$errno\tinfo\t$id\t$row\t$$info[0]\t$$info[1]";
    }
  }

  # Skip the record if there are fatal errors
  next if (@{$$dwc{errors}});

  # Print it!
  eval {
    $dwc->printcsv(\*STDOUT, \@DwC::terms);
  };
  if($@) {
    $errno++;
    say STDERR "$errno\twarning\t$id\t$row\tMalformed input\tcore";
  }
}

# Die ASAP on CSV errors
if($csv->errstr) {
  die($csv->errstr . "\n");
}

# Clean up...
close($verbatim) if $verbatim;

