#!/usr/bin/perl

use strict;
use utf8;

binmode(STDOUT, ":utf8");

use XML::Simple;

my $dwc = XMLin(\*STDIN, ForceArray => ['dwr:SimpleDarwinRecord']);

my $records = $$dwc{'dwr:SimpleDarwinRecord'};

my @dwcterms = (
  'dcterms:type', 'dcterms:modified', 'dcterms:rightsHolder',
  'collectionID', 'datasetID', 'institutionCode', 'collectionCode',
  'ownerInstitutionCode',
  'basisOfRecord', 'occurrenceID', 'catalogNumber', 'recordNumber',

  'recordedBy', 'sex', 'lifeStage', 'preparations', 'organismID',
  'materialSampleID', 'eventDate', 'continent', 'country', 'countryCode',
  'stateProvince', 'county', 'locality', 'decimalLatitude', 'decimalLongitude',
  'coordinateUncertaintyInMeters', 'coordinatePrecision',
  'minimumElevationInMeters', 'maximumElevationInMeters',
  'geodeticDatum', 'identifiedBy', 'dateIdentified', 'scientificName',

  'kingdom', 'class', 'order', 'family',
  'genus', 'specificEpithet', 'infraspecificEpithet',
  'waterBody', 'identificationQualifier',

  'nomenclaturalCode',
  'informationWithheld'
);

my @headers = map {
  $_ =~ /:/ ? $_ : 'dwc:' . $_;
} @dwcterms;

# for my $record (@$records) {
#   for my $term (@headers) {
#     delete $$record{$term};
#   }
#   while (my ($k, $v) = each($record)) {
#     say STDERR "$k not mapped";
#   }
# }

say STDOUT join("\t", @dwcterms);
for my $record (@$records) {
  say STDOUT join("\t", @{$record}{@headers});
}

